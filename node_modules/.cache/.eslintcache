[{"C:\\Users\\datta\\Desktop\\projects\\django-todo\\Djang-api-react-todoapp\\src\\index.js":"1","C:\\Users\\datta\\Desktop\\projects\\django-todo\\Djang-api-react-todoapp\\src\\App.js":"2","C:\\Users\\datta\\Desktop\\projects\\django-todo\\Djang-api-react-todoapp\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":5228,"mtime":1622042169260,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pw3nsc",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\datta\\Desktop\\projects\\django-todo\\Djang-api-react-todoapp\\src\\index.js",[],"C:\\Users\\datta\\Desktop\\projects\\django-todo\\Djang-api-react-todoapp\\src\\App.js",["15","16"],"import React from 'react';\nimport './App.css';\n\nconst fetch = require('node-fetch');\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n      this.state = {\n        todolist:[],\n        activeItem:{\n          id:null,\n          title:'',\n          compleated:false,\n        },\n        editing:false,\n      }\n      this.fetchTasks = this.fetchTasks.bind(this)\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n      this.getCookie = this.getCookie.bind(this)\n      this.deleteItem = this.deleteItem.bind(this)\n      this.strikeunstrike = this.strikeunstrike.bind(this)\n      \n  };\n\n\n  getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n  componentWillMount(){\n    this.fetchTasks()\n  }\n \n  fetchTasks(){\n    console.log('fet')\n    fetch('http://127.0.0.1:8000/api/task-list/')\n    .then(res => res.json())\n    .then(json => this.setState({todolist:json}));\n      \n      \n  }\n  handleChange(e){\n    var name = e.target.name\n    var value = e.target.value\n    console.log('name:',name)\n    console.log('value:',value)\n    this.setState({\n      activeItem:{\n        ...this.state.activeItem,\n        title:value\n      }\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault()\n    console.log('item:', this.state.activeItem)\n    var csrftoken = this.getCookie('csrftoken');\n    var url = 'http://127.0.0.1:8000/api/task-create/'\n    if (this.state.editing ==true){\n      url = `http://127.0.0.1:8000/api/task-update/${ this.state.activeItem.id }/`\n      this.setState({\n        editing:false\n      })\n    }\n    fetch(url,{\n      method:'POST',\n      headers:{\n        'Content-type':'application/json',\n        'X-CSRFToken':csrftoken,\n      },\n      body:JSON.stringify(this.state.activeItem)\n    }).then((response) => {\n      this.fetchTasks()\n      this.setState({\n        activeItem:{\n          id:null,\n          title:'',\n          compleated:false,\n        }\n      })\n    }).catch(function(error){\n      console.log('Error:',error)\n    })\n\n  }\n  startediting(task){\n    this.setState({\n      activeItem:task,\n      editing:true,\n    })\n  }\n\n  deleteItem(task){\n    var csrftoken = this.getCookie('csrftoken');\n    fetch(`http://127.0.0.1:8000/api/task-delete/${task.id}/`,{\n      method:'DELETE',\n      headers:{\n        'content-type':'application/json',\n        'X-CSRFToken':csrftoken\n      },\n    }).then((response) =>{\n      this.fetchTasks()\n    })\n  }\n\n  strikeunstrike(task){\n    var csrftoken = this.getCookie('csrftoken');\n    var url = `http://127.0.0.1:8000/api/task-update/${ task.id }/`\n    task.compleated = !task.compleated\n      fetch(url,{\n        method:'POST',\n        headers:{\n          'content-type':'application/json',\n          'X-CSRFToken':csrftoken\n        },\n        body:JSON.stringify({'compleated':task.compleated,'title':task.title})\n      }).then(() =>{\n        this.fetchTasks()\n      })\n\n    console.log('TASK:',task.compleated)\n  }\n  render(){\n    var tasks = this.state.todolist\n    var self = this\n    return(\n      <div className='container' >\n        <div id='task-container'>\n          <div id='form-wraper'>\n            <form id='form' onSubmit={this.handleSubmit}>\n              <div className='flex-wrapper'>\n                <div style={{flex:6}}>\n                    <input onChange={this.handleChange} id='title' className='form-control' value={this.state.activeItem.title} name='title' placeholder='Add Task'/>\n                </div>\n                <div style={{flex:1}}>\n                    <input id='submit' className='btn btn-warning' type='submit' name='add' />\n                </div>\n\n              </div>\n\n            </form>\n\n          </div>\n          <div id='list-wraper'>\n            {tasks.map(function(task, index){\n              return(\n                <div key={index} className='task-wrapper flex-wrapper'>\n                  <div onClick={() => self.strikeunstrike(task)} style={{flex:7}}>\n                    {task.compleated == false ? (\n                      <span>{task.title}</span>\n                    ):(\n                      <strike>{task.title}</strike>\n                    )}\n                    \n                  </div>\n                  <div style={{flex:1}}>\n                    <button onClick={()=> self.startediting(task)} className='btn btn-sm btn-outline-info'>Edit</button>\n                  </div>\n                  <div style={{flex:1}}>\n                    <button onClick={()=> self.deleteItem(task)} className='btn btn-sm btn-outline-dark'>-</button>\n                  </div>\n                </div>\n                  \n                \n              )\n            })}\n          </div>\n\n        </div>\n\n      </div>\n\n    )\n  }\n}\nexport default App;\n\n","C:\\Users\\datta\\Desktop\\projects\\django-todo\\Djang-api-react-todoapp\\src\\reportWebVitals.js",[],{"ruleId":"17","severity":1,"message":"18","line":73,"column":28,"nodeType":"19","messageId":"20","endLine":73,"endColumn":30},{"ruleId":"17","severity":1,"message":"18","line":163,"column":38,"nodeType":"19","messageId":"20","endLine":163,"endColumn":40},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]